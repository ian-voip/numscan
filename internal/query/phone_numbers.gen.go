// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"numscan/internal/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPhoneNumber(db *gorm.DB, opts ...gen.DOOption) phoneNumber {
	_phoneNumber := phoneNumber{}

	_phoneNumber.phoneNumberDo.UseDB(db, opts...)
	_phoneNumber.phoneNumberDo.UseModel(&models.PhoneNumber{})

	tableName := _phoneNumber.phoneNumberDo.TableName()
	_phoneNumber.ALL = field.NewAsterisk(tableName)
	_phoneNumber.ID = field.NewUint(tableName, "id")
	_phoneNumber.CreatedAt = field.NewTime(tableName, "created_at")
	_phoneNumber.UpdatedAt = field.NewTime(tableName, "updated_at")
	_phoneNumber.DeletedAt = field.NewField(tableName, "deleted_at")
	_phoneNumber.Number = field.NewString(tableName, "number")
	_phoneNumber.Status = field.NewInt(tableName, "status")
	_phoneNumber.Result = field.NewInt(tableName, "result")
	_phoneNumber.ProcessingStartedAt = field.NewTime(tableName, "processing_started_at")
	_phoneNumber.ProcessingCompletedAt = field.NewTime(tableName, "processing_completed_at")
	_phoneNumber.HangupCause = field.NewString(tableName, "hangup_cause")
	_phoneNumber.ErrorMessage = field.NewString(tableName, "error_message")
	_phoneNumber.RetryCount = field.NewInt(tableName, "retry_count")

	_phoneNumber.fillFieldMap()

	return _phoneNumber
}

type phoneNumber struct {
	phoneNumberDo

	ALL                   field.Asterisk
	ID                    field.Uint
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field
	Number                field.String
	Status                field.Int
	Result                field.Int
	ProcessingStartedAt   field.Time
	ProcessingCompletedAt field.Time
	HangupCause           field.String
	ErrorMessage          field.String
	RetryCount            field.Int

	fieldMap map[string]field.Expr
}

func (p phoneNumber) Table(newTableName string) *phoneNumber {
	p.phoneNumberDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p phoneNumber) As(alias string) *phoneNumber {
	p.phoneNumberDo.DO = *(p.phoneNumberDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *phoneNumber) updateTableName(table string) *phoneNumber {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Number = field.NewString(table, "number")
	p.Status = field.NewInt(table, "status")
	p.Result = field.NewInt(table, "result")
	p.ProcessingStartedAt = field.NewTime(table, "processing_started_at")
	p.ProcessingCompletedAt = field.NewTime(table, "processing_completed_at")
	p.HangupCause = field.NewString(table, "hangup_cause")
	p.ErrorMessage = field.NewString(table, "error_message")
	p.RetryCount = field.NewInt(table, "retry_count")

	p.fillFieldMap()

	return p
}

func (p *phoneNumber) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *phoneNumber) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["number"] = p.Number
	p.fieldMap["status"] = p.Status
	p.fieldMap["result"] = p.Result
	p.fieldMap["processing_started_at"] = p.ProcessingStartedAt
	p.fieldMap["processing_completed_at"] = p.ProcessingCompletedAt
	p.fieldMap["hangup_cause"] = p.HangupCause
	p.fieldMap["error_message"] = p.ErrorMessage
	p.fieldMap["retry_count"] = p.RetryCount
}

func (p phoneNumber) clone(db *gorm.DB) phoneNumber {
	p.phoneNumberDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p phoneNumber) replaceDB(db *gorm.DB) phoneNumber {
	p.phoneNumberDo.ReplaceDB(db)
	return p
}

type phoneNumberDo struct{ gen.DO }

type IPhoneNumberDo interface {
	gen.SubQuery
	Debug() IPhoneNumberDo
	WithContext(ctx context.Context) IPhoneNumberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPhoneNumberDo
	WriteDB() IPhoneNumberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPhoneNumberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPhoneNumberDo
	Not(conds ...gen.Condition) IPhoneNumberDo
	Or(conds ...gen.Condition) IPhoneNumberDo
	Select(conds ...field.Expr) IPhoneNumberDo
	Where(conds ...gen.Condition) IPhoneNumberDo
	Order(conds ...field.Expr) IPhoneNumberDo
	Distinct(cols ...field.Expr) IPhoneNumberDo
	Omit(cols ...field.Expr) IPhoneNumberDo
	Join(table schema.Tabler, on ...field.Expr) IPhoneNumberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPhoneNumberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPhoneNumberDo
	Group(cols ...field.Expr) IPhoneNumberDo
	Having(conds ...gen.Condition) IPhoneNumberDo
	Limit(limit int) IPhoneNumberDo
	Offset(offset int) IPhoneNumberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPhoneNumberDo
	Unscoped() IPhoneNumberDo
	Create(values ...*models.PhoneNumber) error
	CreateInBatches(values []*models.PhoneNumber, batchSize int) error
	Save(values ...*models.PhoneNumber) error
	First() (*models.PhoneNumber, error)
	Take() (*models.PhoneNumber, error)
	Last() (*models.PhoneNumber, error)
	Find() ([]*models.PhoneNumber, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PhoneNumber, err error)
	FindInBatches(result *[]*models.PhoneNumber, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PhoneNumber) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPhoneNumberDo
	Assign(attrs ...field.AssignExpr) IPhoneNumberDo
	Joins(fields ...field.RelationField) IPhoneNumberDo
	Preload(fields ...field.RelationField) IPhoneNumberDo
	FirstOrInit() (*models.PhoneNumber, error)
	FirstOrCreate() (*models.PhoneNumber, error)
	FindByPage(offset int, limit int) (result []*models.PhoneNumber, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPhoneNumberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p phoneNumberDo) Debug() IPhoneNumberDo {
	return p.withDO(p.DO.Debug())
}

func (p phoneNumberDo) WithContext(ctx context.Context) IPhoneNumberDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p phoneNumberDo) ReadDB() IPhoneNumberDo {
	return p.Clauses(dbresolver.Read)
}

func (p phoneNumberDo) WriteDB() IPhoneNumberDo {
	return p.Clauses(dbresolver.Write)
}

func (p phoneNumberDo) Session(config *gorm.Session) IPhoneNumberDo {
	return p.withDO(p.DO.Session(config))
}

func (p phoneNumberDo) Clauses(conds ...clause.Expression) IPhoneNumberDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p phoneNumberDo) Returning(value interface{}, columns ...string) IPhoneNumberDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p phoneNumberDo) Not(conds ...gen.Condition) IPhoneNumberDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p phoneNumberDo) Or(conds ...gen.Condition) IPhoneNumberDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p phoneNumberDo) Select(conds ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p phoneNumberDo) Where(conds ...gen.Condition) IPhoneNumberDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p phoneNumberDo) Order(conds ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p phoneNumberDo) Distinct(cols ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p phoneNumberDo) Omit(cols ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p phoneNumberDo) Join(table schema.Tabler, on ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p phoneNumberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p phoneNumberDo) RightJoin(table schema.Tabler, on ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p phoneNumberDo) Group(cols ...field.Expr) IPhoneNumberDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p phoneNumberDo) Having(conds ...gen.Condition) IPhoneNumberDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p phoneNumberDo) Limit(limit int) IPhoneNumberDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p phoneNumberDo) Offset(offset int) IPhoneNumberDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p phoneNumberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPhoneNumberDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p phoneNumberDo) Unscoped() IPhoneNumberDo {
	return p.withDO(p.DO.Unscoped())
}

func (p phoneNumberDo) Create(values ...*models.PhoneNumber) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p phoneNumberDo) CreateInBatches(values []*models.PhoneNumber, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p phoneNumberDo) Save(values ...*models.PhoneNumber) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p phoneNumberDo) First() (*models.PhoneNumber, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PhoneNumber), nil
	}
}

func (p phoneNumberDo) Take() (*models.PhoneNumber, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PhoneNumber), nil
	}
}

func (p phoneNumberDo) Last() (*models.PhoneNumber, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PhoneNumber), nil
	}
}

func (p phoneNumberDo) Find() ([]*models.PhoneNumber, error) {
	result, err := p.DO.Find()
	return result.([]*models.PhoneNumber), err
}

func (p phoneNumberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PhoneNumber, err error) {
	buf := make([]*models.PhoneNumber, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p phoneNumberDo) FindInBatches(result *[]*models.PhoneNumber, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p phoneNumberDo) Attrs(attrs ...field.AssignExpr) IPhoneNumberDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p phoneNumberDo) Assign(attrs ...field.AssignExpr) IPhoneNumberDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p phoneNumberDo) Joins(fields ...field.RelationField) IPhoneNumberDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p phoneNumberDo) Preload(fields ...field.RelationField) IPhoneNumberDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p phoneNumberDo) FirstOrInit() (*models.PhoneNumber, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PhoneNumber), nil
	}
}

func (p phoneNumberDo) FirstOrCreate() (*models.PhoneNumber, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PhoneNumber), nil
	}
}

func (p phoneNumberDo) FindByPage(offset int, limit int) (result []*models.PhoneNumber, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p phoneNumberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p phoneNumberDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p phoneNumberDo) Delete(models ...*models.PhoneNumber) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *phoneNumberDo) withDO(do gen.Dao) *phoneNumberDo {
	p.DO = *do.(*gen.DO)
	return p
}
